import{S as an,i as sn,s as en,k as o,r as p,a as E,l as c,m as i,u as l,h as t,c as I,p as m,b as r,M as a,n as K}from"./index.26320ab0.js";function on(V){let u,F,f,g,x,k,M,h,N,R,H,e,S,b,D,O,_,Y,G,A,L,W,P,w,X=`<code class="language-typescript"><span class="token comment">// main.ts</span>

<span class="token function">bootstrapApplication</span><span class="token punctuation">(</span>AppComponent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">provideRouter</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">provideHttpClient</span><span class="token punctuation">(</span><span class="token function">withInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sportsApiInterceptor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,C,v,$,q,y,Z=`<code class="language-typescript"><span class="token comment">// interceptors.ts</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> sportsApiInterceptor<span class="token operator">:</span> <span class="token function-variable function">HttpInterceptorFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'api.sportsdata.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">API_KEY</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
    <span class="token keyword">const</span> newReq <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> url <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>newReq<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){u=o("h2"),F=p("Functional Interceptors in Angular 15"),f=o("a"),g=o("span"),x=E(),k=o("p"),M=p("With the v15 release of Angular expected in mid-November, the "),h=o("a"),N=p("standalone component API"),R=p(" will finally be considered stable. There will not be any breaking changes, as you can use standalone components, directives, and pipes in your module-based apps. No need to go and refactor all of your existing code."),H=E(),e=o("p"),S=p("However, if you choose to go with a standalone angular application (meaning you bootstrap your app without an AppModule), there will be some differences. You will need to use the new "),b=o("code"),D=p("provideHttpClient"),O=p(" API to register the "),_=o("code"),Y=p("HttpClient"),G=p(" provider. To use interceptors with this setup, you will need to pass in the "),A=o("code"),L=p("withInterceptors"),W=p(" option including any interceptors."),P=E(),w=o("pre"),C=E(),v=o("p"),$=p("Great! So now that you know how to register your interceptors in a standalone Angular application, it’s probably time to mention that the class-based interceptors you’re accustomed to will not work here. Instead, we need to define functional interceptors like so:"),q=E(),y=o("pre"),this.h()},l(n){u=c(n,"H2",{id:!0});var s=i(u);F=l(s,"Functional Interceptors in Angular 15"),s.forEach(t),f=c(n,"A",{href:!0});var j=i(f);g=c(j,"SPAN",{class:!0}),i(g).forEach(t),j.forEach(t),x=I(n),k=c(n,"P",{});var T=i(k);M=l(T,"With the v15 release of Angular expected in mid-November, the "),h=c(T,"A",{href:!0,rel:!0});var z=i(h);N=l(z,"standalone component API"),z.forEach(t),R=l(T," will finally be considered stable. There will not be any breaking changes, as you can use standalone components, directives, and pipes in your module-based apps. No need to go and refactor all of your existing code."),T.forEach(t),H=I(n),e=c(n,"P",{});var d=i(e);S=l(d,"However, if you choose to go with a standalone angular application (meaning you bootstrap your app without an AppModule), there will be some differences. You will need to use the new "),b=c(d,"CODE",{});var B=i(b);D=l(B,"provideHttpClient"),B.forEach(t),O=l(d," API to register the "),_=c(d,"CODE",{});var J=i(_);Y=l(J,"HttpClient"),J.forEach(t),G=l(d," provider. To use interceptors with this setup, you will need to pass in the "),A=c(d,"CODE",{});var Q=i(A);L=l(Q,"withInterceptors"),Q.forEach(t),W=l(d," option including any interceptors."),d.forEach(t),P=I(n),w=c(n,"PRE",{class:!0});var nn=i(w);nn.forEach(t),C=I(n),v=c(n,"P",{});var U=i(v);$=l(U,"Great! So now that you know how to register your interceptors in a standalone Angular application, it’s probably time to mention that the class-based interceptors you’re accustomed to will not work here. Instead, we need to define functional interceptors like so:"),U.forEach(t),q=I(n),y=c(n,"PRE",{class:!0});var tn=i(y);tn.forEach(t),this.h()},h(){m(u,"id","functional-interceptors-in-angular-15"),m(g,"class","icon icon-link"),m(f,"href","#functional-interceptors-in-angular-15"),m(h,"href","https://angular.io/guide/standalone-components"),m(h,"rel","nofollow"),m(w,"class","language-typescript"),m(y,"class","language-typescript")},m(n,s){r(n,u,s),a(u,F),r(n,f,s),a(f,g),r(n,x,s),r(n,k,s),a(k,M),a(k,h),a(h,N),a(k,R),r(n,H,s),r(n,e,s),a(e,S),a(e,b),a(b,D),a(e,O),a(e,_),a(_,Y),a(e,G),a(e,A),a(A,L),a(e,W),r(n,P,s),r(n,w,s),w.innerHTML=X,r(n,C,s),r(n,v,s),a(v,$),r(n,q,s),r(n,y,s),y.innerHTML=Z},p:K,i:K,o:K,d(n){n&&t(u),n&&t(f),n&&t(x),n&&t(k),n&&t(H),n&&t(e),n&&t(P),n&&t(w),n&&t(C),n&&t(v),n&&t(q),n&&t(y)}}}const cn={title:"Functional Interceptors in Angular 15",date:"2022-11-16",description:"Angular v15 brings with it a new, functional way to write interceptors and register them in your standalone Angular application. This brief article shows you how.",published:!0,tags:["angular"]};class ln extends an{constructor(u){super(),sn(this,u,null,on,en,{})}}export{ln as default,cn as metadata};
