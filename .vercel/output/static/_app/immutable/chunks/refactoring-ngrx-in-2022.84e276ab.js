import{S as vs,i as Bs,s as As,k as e,r as o,a as k,l as c,m as l,u as p,h as s,c as i,p as r,b as u,M as a,n as Jn}from"./index.26320ab0.js";function Is(gs){let g,dn,v,G,Q,m,fn,B,hn,gn,V,d,mn,H,yn,wn,A,bn,vn,L,Bn,An,X,I,In,E,j,Z,M,En,$,F,Sn,nn,S,ms=`<code class="language-typescript"><span class="token comment">// ACTIONS</span>
<span class="token keyword">const</span> loadBooks <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">"[Books Page] fetch books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> loadBooksSuccess <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Books Page] fetch books success"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> books<span class="token operator">:</span> Book<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> loadBooksError <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Books Page] fetch books failure"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> errorMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadBookById <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">"[Books Details Panel] fetch book by id"</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> loadBookByIdSuccess <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Book Details Panel] fetch book by id success"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> books<span class="token operator">:</span> Book <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> loadBookByIdError <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Book Details Panel] fetch book by id failure"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> errorMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> editBookDetails <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Books Details Panel] edit book details"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> book<span class="token operator">:</span> Book <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> editBookDetailsSuccess <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Book Details Panel] edit book details success"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> update<span class="token operator">:</span> Update<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> editBookDetailsError <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span>
  <span class="token string">"[Book Details Panel] edit book details error"</span><span class="token punctuation">,</span>
  <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> errorMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> fromBooksActions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  loadBooks<span class="token punctuation">,</span>
  loadBooksSuccess<span class="token punctuation">,</span>
  loadBooksError<span class="token punctuation">,</span>
  editBookDetails<span class="token punctuation">,</span>
  editBookDetailsSuccess<span class="token punctuation">,</span>
  editBookDetailsError<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Reducers</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">BOOKS_FEATURE_KEY</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">books</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> adapter<span class="token operator">:</span> EntityAdapter<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEntityAdapter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Book<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> initialState<span class="token operator">:</span> BooksState <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">getInitialState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  selectedBookId<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> booksReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>
  initialState<span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>loadBooks<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>loadBooksSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> books <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">setMany</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>loadBooksError<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>loadBooksById<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>loadBooksByIdSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> book <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">upsertOne</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>loadBooksByIdError<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>editBookDetails<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>editBookDetailsSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> update <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">on</span><span class="token punctuation">(</span>editBookDetailsError<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Selectors</span>
<span class="token keyword">const</span> booksFeature <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createFeatureSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>BooksState<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token constant">BOOKS_FEATURE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> selectLoading <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>
  booksFeature<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>state<span class="token operator">:</span> BooksState<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>loading
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> selectError <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>
  booksFeature<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>state<span class="token operator">:</span> BooksState<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>error
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> selectBooks <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>
  booksFeature<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>state<span class="token operator">:</span> BooksState<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>books
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> selectSelectedBookId <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>
  booksFeature<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>state<span class="token operator">:</span> BooksState<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>selectedBookId
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> selectAll <span class="token punctuation">&#125;</span> <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">getSelectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> fromBooksSelectors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  selectBooks<span class="token operator">:</span> selectAll<span class="token punctuation">,</span>
  selectLoading<span class="token punctuation">,</span>
  selectError<span class="token punctuation">,</span>
  selectBooks<span class="token punctuation">,</span>
  selectSelectedBookId
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,sn,f,Pn,Y,xn,_n,q,Rn,Nn,K,Dn,Mn,an,O,Fn,tn,P,ys=`<code class="language-typescript"><span class="token comment">// ACTIONS</span>
<span class="token keyword">const</span> booksPageActions <span class="token operator">=</span> <span class="token function">createActionGroup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  source<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Books Page</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>
  events<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'load books'</span><span class="token operator">:</span> <span class="token function">emptyProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'load books success'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> books<span class="token operator">:</span> Book<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'load books error'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> errorMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> bookDetailsPanelActions <span class="token operator">=</span> <span class="token function">createActionGroup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  source<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Book Details Panel</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>
  events<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'load book by id'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'load book by id success'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> book<span class="token operator">:</span> Book <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'load book by id error'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> errorMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'edit book details'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> book<span class="token operator">:</span> Book <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'edit book details success'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> update<span class="token operator">:</span> Update<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">'edit book details error'</span><span class="token operator">:</span> <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> errorMessage<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> fromBooksActions <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>booksPageActions<span class="token punctuation">,</span> <span class="token operator">...</span>bookDetailsPanelActions <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Reducers</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> adapter<span class="token operator">:</span> EntityAdapter<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEntityAdapter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Book<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> initialState<span class="token operator">:</span> BooksState <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">getInitialState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  selectedBookId<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> booksFeature <span class="token operator">=</span> <span class="token function">createFeature</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'books'</span><span class="token punctuation">,</span>
  reducer<span class="token operator">:</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>
    initialState<span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>loadBooks<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>loadBooksSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> books <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">setMany</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>loadBooksError<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>loadBooksById<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>loadBooksByIdSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> book <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">upsertOne</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>loadBooksByIdError<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>editBookDetails<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>editBookDetailsSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> update <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> adapter<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">on</span><span class="token punctuation">(</span>editBookDetailsError<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> errorMessage <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> selectAll <span class="token punctuation">&#125;</span> <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">getSelectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> selectIsLoading<span class="token punctuation">,</span> selectError<span class="token punctuation">,</span> selectSelectedBookId <span class="token punctuation">&#125;</span> <span class="token operator">=</span> booksFeature<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> fromBooksSelectors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  selectBooks<span class="token operator">:</span> selectAll<span class="token punctuation">,</span>
  selectIsLoading<span class="token punctuation">,</span>
  selectError<span class="token punctuation">,</span>
  selectSelectedBookId
<span class="token punctuation">&#125;</span></code>`,on,T,On,pn,C,x,Tn,U,Cn,Wn,en,_,Gn,R,z,cn,y,Hn,J,Ln,jn,ln,h,Yn,N,qn,Kn,D,Un,zn;return{c(){g=e("h2"),dn=o("Refactoring NgRx in 2022"),v=e("a"),G=e("span"),Q=k(),m=e("p"),fn=o("NgRx version 14 introduced the "),B=e("a"),hn=o("createActionGroup"),gn=o(" API and a lot of people are excited about it. With this addition, NgRx actions are much easier to write and the format is far more readable. At a glance, you can see what actions affect a slice of state and their event sources."),V=k(),d=e("p"),mn=o("While I’ve seen a ton of hype around "),H=e("code"),yn=o("createActionGroup"),wn=o(", I haven’t seen much about the "),A=e("a"),bn=o("createFeature"),vn=o(" API. First introduced in version 12, the "),L=e("code"),Bn=o("createFeature"),An=o("API simplifies the creation and registration of your reducer, but it also generates selectors for your feature and every property on the state object. When these two APIs are used together, it makes for a cleaner, far more concise NgRx implementation."),X=k(),I=e("h3"),In=o("Why refactor?"),E=e("a"),j=e("span"),Z=k(),M=e("p"),En=o("You might ask why you should refactor working NgRx code. It’s a fair question and the short answer is that you don’t have to, of course. However, these new APIs improve readability and dramatically reduce the amount of code you have to write. In other words, your NgRx implementation becomes easier to understand and easier to maintain. I’ve refactored several feature stores now and the consensus among “codeowners” is that it was well worth the effort."),$=k(),F=e("p"),Sn=o("To see this in action, let’s refactor a relatively simple feature store implemenation to take advantage of these new APIs."),nn=k(),S=e("pre"),sn=k(),f=e("p"),Pn=o("While the helper functions "),Y=e("code"),xn=o("createAction"),_n=o(", "),q=e("code"),Rn=o("createReducer"),Nn=o(", and "),K=e("code"),Dn=o("createSelector"),Mn=o(" helped a lot with reducing the verbosity of NgRx, it was clear that there was still a fair amount of work involved with setting it up."),an=k(),O=e("p"),Fn=o("Now let’s take a look at what that looks like using the new APIs:"),tn=k(),P=e("pre"),on=k(),T=e("p"),On=o("The original implementation in the first snippet was 100 lines of code. The refactored implementation in the second snippet is only 62 lines of code, which is a 38% decrease in verbosity. I’m seeing similar (and in some cases even larger) differences in production code as well."),pn=k(),C=e("p"),x=e("strong"),Tn=o("Note: I realize that I could get access to the selectors in my feature components through the exported "),U=e("code"),Cn=o("booksFeature"),Wn=o(" object, but that would provide easy access to the reducer from the component and I don’t want to do that. So I’m re-exporting the selectors wrapped in an object."),en=k(),_=e("h3"),Gn=o("Conclusion"),R=e("a"),z=e("span"),cn=k(),y=e("p"),Hn=o("In my opinion, "),J=e("code"),Ln=o("createActionGroup"),jn=o(" improves readability for action creation. With this in place, it’s much easier to see quickly what actions are handled by a slice of state and what their event sources are."),ln=k(),h=e("p"),Yn=o("For a more complete, deeper explanation of these new APIs and how to register them with the "),N=e("a"),qn=o("Angular Standalone Components API"),Kn=o(", take a look at "),D=e("a"),Un=o("You Should Take Advantage of the Improved NgRx APIs"),zn=o(" from NgRx team member Tim Deschryver."),this.h()},l(n){g=c(n,"H2",{id:!0});var t=l(g);dn=p(t,"Refactoring NgRx in 2022"),t.forEach(s),v=c(n,"A",{href:!0});var Qn=l(v);G=c(Qn,"SPAN",{class:!0}),l(G).forEach(s),Qn.forEach(s),Q=i(n),m=c(n,"P",{});var un=l(m);fn=p(un,"NgRx version 14 introduced the "),B=c(un,"A",{href:!0,rel:!0});var Vn=l(B);hn=p(Vn,"createActionGroup"),Vn.forEach(s),gn=p(un," API and a lot of people are excited about it. With this addition, NgRx actions are much easier to write and the format is far more readable. At a glance, you can see what actions affect a slice of state and their event sources."),un.forEach(s),V=i(n),d=c(n,"P",{});var w=l(d);mn=p(w,"While I’ve seen a ton of hype around "),H=c(w,"CODE",{});var Xn=l(H);yn=p(Xn,"createActionGroup"),Xn.forEach(s),wn=p(w,", I haven’t seen much about the "),A=c(w,"A",{href:!0,rel:!0});var Zn=l(A);bn=p(Zn,"createFeature"),Zn.forEach(s),vn=p(w," API. First introduced in version 12, the "),L=c(w,"CODE",{});var $n=l(L);Bn=p($n,"createFeature"),$n.forEach(s),An=p(w,"API simplifies the creation and registration of your reducer, but it also generates selectors for your feature and every property on the state object. When these two APIs are used together, it makes for a cleaner, far more concise NgRx implementation."),w.forEach(s),X=i(n),I=c(n,"H3",{id:!0});var ns=l(I);In=p(ns,"Why refactor?"),ns.forEach(s),E=c(n,"A",{href:!0});var ss=l(E);j=c(ss,"SPAN",{class:!0}),l(j).forEach(s),ss.forEach(s),Z=i(n),M=c(n,"P",{});var as=l(M);En=p(as,"You might ask why you should refactor working NgRx code. It’s a fair question and the short answer is that you don’t have to, of course. However, these new APIs improve readability and dramatically reduce the amount of code you have to write. In other words, your NgRx implementation becomes easier to understand and easier to maintain. I’ve refactored several feature stores now and the consensus among “codeowners” is that it was well worth the effort."),as.forEach(s),$=i(n),F=c(n,"P",{});var ts=l(F);Sn=p(ts,"To see this in action, let’s refactor a relatively simple feature store implemenation to take advantage of these new APIs."),ts.forEach(s),nn=i(n),S=c(n,"PRE",{class:!0});var ws=l(S);ws.forEach(s),sn=i(n),f=c(n,"P",{});var b=l(f);Pn=p(b,"While the helper functions "),Y=c(b,"CODE",{});var os=l(Y);xn=p(os,"createAction"),os.forEach(s),_n=p(b,", "),q=c(b,"CODE",{});var ps=l(q);Rn=p(ps,"createReducer"),ps.forEach(s),Nn=p(b,", and "),K=c(b,"CODE",{});var es=l(K);Dn=p(es,"createSelector"),es.forEach(s),Mn=p(b," helped a lot with reducing the verbosity of NgRx, it was clear that there was still a fair amount of work involved with setting it up."),b.forEach(s),an=i(n),O=c(n,"P",{});var cs=l(O);Fn=p(cs,"Now let’s take a look at what that looks like using the new APIs:"),cs.forEach(s),tn=i(n),P=c(n,"PRE",{class:!0});var bs=l(P);bs.forEach(s),on=i(n),T=c(n,"P",{});var ls=l(T);On=p(ls,"The original implementation in the first snippet was 100 lines of code. The refactored implementation in the second snippet is only 62 lines of code, which is a 38% decrease in verbosity. I’m seeing similar (and in some cases even larger) differences in production code as well."),ls.forEach(s),pn=i(n),C=c(n,"P",{});var us=l(C);x=c(us,"STRONG",{});var rn=l(x);Tn=p(rn,"Note: I realize that I could get access to the selectors in my feature components through the exported "),U=c(rn,"CODE",{});var rs=l(U);Cn=p(rs,"booksFeature"),rs.forEach(s),Wn=p(rn," object, but that would provide easy access to the reducer from the component and I don’t want to do that. So I’m re-exporting the selectors wrapped in an object."),rn.forEach(s),us.forEach(s),en=i(n),_=c(n,"H3",{id:!0});var ks=l(_);Gn=p(ks,"Conclusion"),ks.forEach(s),R=c(n,"A",{href:!0});var is=l(R);z=c(is,"SPAN",{class:!0}),l(z).forEach(s),is.forEach(s),cn=i(n),y=c(n,"P",{});var kn=l(y);Hn=p(kn,"In my opinion, "),J=c(kn,"CODE",{});var ds=l(J);Ln=p(ds,"createActionGroup"),ds.forEach(s),jn=p(kn," improves readability for action creation. With this in place, it’s much easier to see quickly what actions are handled by a slice of state and what their event sources are."),kn.forEach(s),ln=i(n),h=c(n,"P",{});var W=l(h);Yn=p(W,"For a more complete, deeper explanation of these new APIs and how to register them with the "),N=c(W,"A",{href:!0,rel:!0});var fs=l(N);qn=p(fs,"Angular Standalone Components API"),fs.forEach(s),Kn=p(W,", take a look at "),D=c(W,"A",{href:!0,rel:!0});var hs=l(D);Un=p(hs,"You Should Take Advantage of the Improved NgRx APIs"),hs.forEach(s),zn=p(W," from NgRx team member Tim Deschryver."),W.forEach(s),this.h()},h(){r(g,"id","refactoring-ngrx-in-2022"),r(G,"class","icon icon-link"),r(v,"href","#refactoring-ngrx-in-2022"),r(B,"href","https://ngrx.io/api/store/createActionGroup"),r(B,"rel","nofollow"),r(A,"href","https://ngrx.io/api/store/createFeature"),r(A,"rel","nofollow"),r(I,"id","why-refactor"),r(j,"class","icon icon-link"),r(E,"href","#why-refactor"),r(S,"class","language-typescript"),r(P,"class","language-typescript"),r(_,"id","conclusion"),r(z,"class","icon icon-link"),r(R,"href","#conclusion"),r(N,"href","https://angular.io/guide/standalone-components"),r(N,"rel","nofollow"),r(D,"href","https://timdeschryver.dev/blog/you-should-take-advantage-of-the-improved-ngrx-apis"),r(D,"rel","nofollow")},m(n,t){u(n,g,t),a(g,dn),u(n,v,t),a(v,G),u(n,Q,t),u(n,m,t),a(m,fn),a(m,B),a(B,hn),a(m,gn),u(n,V,t),u(n,d,t),a(d,mn),a(d,H),a(H,yn),a(d,wn),a(d,A),a(A,bn),a(d,vn),a(d,L),a(L,Bn),a(d,An),u(n,X,t),u(n,I,t),a(I,In),u(n,E,t),a(E,j),u(n,Z,t),u(n,M,t),a(M,En),u(n,$,t),u(n,F,t),a(F,Sn),u(n,nn,t),u(n,S,t),S.innerHTML=ms,u(n,sn,t),u(n,f,t),a(f,Pn),a(f,Y),a(Y,xn),a(f,_n),a(f,q),a(q,Rn),a(f,Nn),a(f,K),a(K,Dn),a(f,Mn),u(n,an,t),u(n,O,t),a(O,Fn),u(n,tn,t),u(n,P,t),P.innerHTML=ys,u(n,on,t),u(n,T,t),a(T,On),u(n,pn,t),u(n,C,t),a(C,x),a(x,Tn),a(x,U),a(U,Cn),a(x,Wn),u(n,en,t),u(n,_,t),a(_,Gn),u(n,R,t),a(R,z),u(n,cn,t),u(n,y,t),a(y,Hn),a(y,J),a(J,Ln),a(y,jn),u(n,ln,t),u(n,h,t),a(h,Yn),a(h,N),a(N,qn),a(h,Kn),a(h,D),a(D,Un),a(h,zn)},p:Jn,i:Jn,o:Jn,d(n){n&&s(g),n&&s(v),n&&s(Q),n&&s(m),n&&s(V),n&&s(d),n&&s(X),n&&s(I),n&&s(E),n&&s(Z),n&&s(M),n&&s($),n&&s(F),n&&s(nn),n&&s(S),n&&s(sn),n&&s(f),n&&s(an),n&&s(O),n&&s(tn),n&&s(P),n&&s(on),n&&s(T),n&&s(pn),n&&s(C),n&&s(en),n&&s(_),n&&s(R),n&&s(cn),n&&s(y),n&&s(ln),n&&s(h)}}}const Ss={title:"Refactoring NgRx in 2022",date:"2022-11-11",description:"New APIs are availabe to make your NgRx implementation more readable with far less code. Let's refactor an existing feature store using these new APIs to see the difference!",published:!0,tags:["angular","ngrx"]};class Ps extends vs{constructor(g){super(),Bs(this,g,null,Is,As,{})}}export{Ps as default,Ss as metadata};
